# Multi-stage build for combined frontend + backend
FROM node:22-alpine as frontend-build

# Build frontend
WORKDIR /app
COPY my-app/package.json ./
RUN npm install

COPY my-app/ ./

# Build arguments for React environment variables
ARG REACT_APP_API_URL=http://localhost/api
ARG REACT_APP_WS_URL=ws://localhost/api
ARG REACT_APP_URL=http://localhost
ARG REACT_APP_SUPABASE_URL
ARG REACT_APP_SUPABASE_ANON_KEY
ARG REACT_APP_BYPASS_AUTH=false
ARG REACT_APP_SHOW_DEMO_WHEN_LOGGED_OUT=true
ARG REACT_APP_INCLUDE_DEMO_WHEN_LOGGED_IN=false

# Set environment variables for React build
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV REACT_APP_WS_URL=$REACT_APP_WS_URL
ENV REACT_APP_URL=$REACT_APP_URL
ENV REACT_APP_SUPABASE_URL=$REACT_APP_SUPABASE_URL
ENV REACT_APP_SUPABASE_ANON_KEY=$REACT_APP_SUPABASE_ANON_KEY
ENV REACT_APP_BYPASS_AUTH=$REACT_APP_BYPASS_AUTH
ENV REACT_APP_SHOW_DEMO_WHEN_LOGGED_OUT=$REACT_APP_SHOW_DEMO_WHEN_LOGGED_OUT
ENV REACT_APP_INCLUDE_DEMO_WHEN_LOGGED_IN=$REACT_APP_INCLUDE_DEMO_WHEN_LOGGED_IN

# Debug: Show environment variables during build
RUN echo "ðŸ”— Building with API URL: $REACT_APP_API_URL"
RUN echo "ðŸ”— Building with WS URL: $REACT_APP_WS_URL"
RUN echo "ðŸ”— Building with APP URL: $REACT_APP_URL"

RUN npm run build

# Backend build stage
FROM python:3.12 AS backend-build

WORKDIR /app
RUN apt-get update && apt-get install -y && rm -rf /var/lib/apt/lists/*
RUN pip install uv

COPY backend/pyproject.toml .
RUN uv venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN uv pip install .

# Production stage
FROM python:3.12-slim

# Install nginx, supervisor and runtime dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    supervisor \
    libgomp1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from backend-build stage
COPY --from=backend-build /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy frontend build
COPY --from=frontend-build /app/build /usr/share/nginx/html

# Setup backend
WORKDIR /app/backend
COPY backend/ .

# Nginx configuration
RUN echo 'server { \
    listen 80; \
    location / { \
        root /var/www/html; \
        try_files $uri $uri/ /index.html; \
    } \
    location /api { \
        proxy_pass http://localhost:8000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
    } \
}' > /etc/nginx/sites-available/default

# Supervisor configuration
RUN echo '[supervisord] \
nodaemon=true \
[program:nginx] \
command=nginx -g "daemon off;" \
[program:backend] \
command=uvicorn main:app --host 0.0.0.0 --port 8000 \
directory=/app/backend' > /etc/supervisor/conf.d/supervisord.conf

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/ && curl -f http://localhost/api/health || exit 1

CMD ["/usr/bin/supervisord"]