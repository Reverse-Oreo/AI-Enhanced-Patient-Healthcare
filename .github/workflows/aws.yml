# This workflow will build and push the frontend container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# SECURITY: Uses OIDC authentication instead of long-lived access keys
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository for frontend images:
#    aws ecr create-repository --repository-name your-frontend-repo --region us-east-1
#
# 2. Create an ECS task definition, cluster, and service:
#    Follow the Getting Started guide: https://console.aws.amazon.com/ecs/home#/firstRun
#
# 3. Set up OIDC Identity Provider in AWS IAM:
#    - Provider URL: https://token.actions.githubusercontent.com
#    - Audience: sts.amazonaws.com
#
# 4. Create IAM role with trust policy for this repository:
#    - Role name: github-actions-ecs-role
#    - Trust policy: Allow GitHub OIDC for this specific repo
#    - Permissions: ECR push, ECS deploy
#
# 5. Add these GitHub Secrets:
#    - AWS_REGION: Your AWS region (e.g., us-east-1)
#    - AWS_ROLE_ARN: ARN of the IAM role created in step 4
#    - ECR_REPOSITORY_FRONTEND: Frontend ECR repository name
#    - ECS_CLUSTER: ECS cluster name
#    - ECS_SERVICE: ECS service name
#    - ECS_TASK_DEFINITION: Path to task definition JSON
#    - FRONTEND_CONTAINER_NAME: Container name in task definition

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "cicd2" ]

# env:
#  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
#  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
#  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
#  FRONTEND_CONTAINER_NAME: ${{ secrets.FRONTEND_CONTAINER_NAME }}

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read

jobs:

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production
  
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Debug OIDC Token
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "SHA: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Job: ${{ github.job }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHubActions-Frontend-Deploy
        role-skip-session-tagging: true
  
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Pull from Docker Hub and push to ECR
    - name: Pull and push frontend image
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        DOCKERHUB_FRONTEND: ${{ secrets.DOCKERHUB_FRONTEND }}
      run: |
        # Pull from Docker Hub
        docker pull $DOCKERHUB_FRONTEND

        # Tag for ECR
        docker tag $DOCKERHUB_FRONTEND $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG
        docker tag $DOCKERHUB_FRONTEND $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_FRONTEND }}:latest

        # Push to ECR
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_FRONTEND }}:latest

        echo "frontend_image=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Pull and push backend image
    - name: Pull and push backend image
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        DOCKERHUB_BACKEND: ${{ secrets.DOCKERHUB_BACKEND }}
      run: |
        # Pull from Docker Hub
        docker pull $DOCKERHUB_BACKEND

        # Tag for ECR (assuming ECR_REPOSITORY_BACKEND secret exists)
        docker tag $DOCKERHUB_BACKEND $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG
        docker tag $DOCKERHUB_BACKEND $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_BACKEND }}:latest

        # Push to ECR
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_BACKEND }}:latest

        echo "backend_image=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # # Download current task definition from AWS
    # - name: Download task definition
    #   run: |
    #     aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION \
    #       --query taskDefinition > task-definition.json

    # # Update task definition with frontend image
    # - name: Update frontend container in task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
    #     image: ${{ steps.build-frontend.outputs.frontend_image }}

    # # Deploy to ECS
    # - name: Deploy to Amazon ECS
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
